#ifndef _115_O_
#define _115_O_

/*
 * Inserting the value n: O(log n)
 * In a balanced Binary Search Tree (BST), the height of the tree
 * is logarithmic with respect to the number of nodes. Therefore,
 * inserting a new node in a balanced BST has an average time
 * complexity of O(log n).
 */


/*
 * Removing the node with the value n: O(log n)
 * Similar to insertion, removal in a balanced Binary Search Tree
 * (BST) also has an average time complexity of O(log n). This is
 * because the search for the node to remove and the restructuring
 * of the tree to maintain the BST property both have logarithmic
 * complexities.
 */


/*
 * Searching for a node in a BST of size n: O(log n)
 * Searching for a node in a balanced Binary Search Tree (BST)
 * has an average time complexity of O(log n). This is because,
 * in a balanced BST, the height of the tree is logarithmic with
 * respect to the number of nodes, which means the search operation
 * also has a logarithmic time complexity.
 */

#endif /* _115_O_ */
